AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Cloud Formation Template to generate cloud stack for Email Spam Classification. Creation of roles, policies, Lambda, S3 Buckets.
Parameters:
  EndPointName:
    Description: "Enter SageMaker Endpoint Name"
    Default: sms-spam-classifier-mxnet-2022-11-29-01-57-29-092
    Type: String

  SageMakerBucket:
    Type: String
    Default: bucketsage-v15

  SESBucket:
    Type: String
    Default: bucketses-v15
  
  LambdaBucket:
    Type: String
    Default: cloudassignmentthree

  LambdaKey:
    Type: String
    Default: python.zip

Resources:
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: !Ref LambdaKey
      Runtime: python3.9
      Role: !GetAtt LambdaRole.Arn
      Handler: lambda_function.lambda_handler
      FunctionName: detect-spamv15
      Layers:
        - arn:aws:lambda:us-east-1:283227796002:layer:numpy:3

  LamdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn:
        Fn::Sub: arn:aws:s3:::${SESBucket}    

  LambdaRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
      Description: "EmailSpamDetect-role-4gp2wxqm"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      Path: "/"
      RoleName: EmailSpamDetect-role-4gp2wxqm

  S3BucketSagemaker:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref SageMakerBucket
      VersioningConfiguration: 
        Status: Enabled
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: FALSE
        BlockPublicPolicy: FALSE
        IgnorePublicAcls: FALSE
        RestrictPublicBuckets: FALSE
  
  SESEmailBucket:
    DependsOn: LamdaPermission
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref SESBucket
      VersioningConfiguration: 
        Status: Enabled
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: FALSE
        BlockPublicPolicy: FALSE
        IgnorePublicAcls: FALSE
        RestrictPublicBuckets: FALSE
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt Lambda.Arn

  SESBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref SESEmailBucket
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          -
            Sid: AllowSESPuts
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${SESEmailBucket}/*